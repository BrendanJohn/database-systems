/* 
 * Problem Set 1, SQL Programming Problems
 *
 * Put your name and email address below:
 *     name: Brendan Murphy
 *     email: brm043@g.harvard.edu
 */

/**********************************************************
 * REMEMBER: You should include only the SQL commands,
 * *NOT* the results that they produce.
 **********************************************************/

/*
 * sample query: Find the names and runtimes of all 
 * movies from the year 2000.
 */

SELECT name, runtime
FROM Movie
WHERE year = 2000;


/*
 * Problem 5. Put your SQL command for this problem below.	
 */
SELECT Movie.name,Movie.year 
FROM Movie 
WHERE name LIKE '%Lady%';


/*
 * Problem 6. Put your SQL command for this problem below.	
 */
SELECT DISTINCT COUNT(id) 
FROM Person 
WHERE pob LIKE '%UK';


/*
 * Problem 7. Put your SQL command for this problem below.	
 */
SELECT Oscar.year, Oscar.type, Movie.name 
FROM Oscar INNER JOIN Movie ON Movie.id = Oscar.movie_id 
WHERE Oscar.person_id='0000658';


/*
 * Problem 8. Put your SQL command for this problem below.	
 */
SELECT Movie.name,Movie.year 
FROM Movie 
WHERE Movie.name = 'Good Will Hunting' OR Movie.name = 'Mystic River';


/*
 * Problem 9. Put your SQL command for this problem below.	
 */
SELECT Movie.name, Movie.year 
FROM Movie 
WHERE Movie.rating = 'R' 
and Movie.year=(
	SELECT MIN (Movie.year) 
	FROM Movie 
	WHERE Movie.rating = 'R');


/*
 * Problem 10. Put your SQL command for this problem below.	
 */
SELECT Movie.rating, COUNT(*), MIN(movie.earnings_rank)
From Movie
WHERE Movie.earnings_rank <=200
GROUP BY Movie.rating
ORDER BY COUNT(*) DESC;


/*
 * Problem 11. Put your SQL command for this problem below.	
 */
SELECT Person.pob, COUNT(*)
From Person
WHERE Person.pob != 'null'
GROUP BY Person.pob
HAVING COUNT(*) >=50;


/*
 * Problem 12. Put your SQL command for this problem below.	
 */
SELECT COUNT (Distinct Actor.actor_id) AS "nonCurrentActors"
FROM Actor
WHERE Actor.actor_id NOT IN
	(SELECT Actor.actor_id
	FROM Actor, Movie
	WHERE Actor.movie_id = Movie.id
	AND Movie.year >= 2010);


/*
 * Problem 13. Put your SQL command for this problem below.	
 */
SELECT Person.name, COUNT (Oscar.person_id) as OscarWins
FROM Person
LEFT OUTER JOIN Oscar ON Person.id = Oscar.person_id
WHERE Person.id IN
	(SELECT Person.id
	FROM Person
	WHERE Person.pob LIKE '%Mexico')
GROUP BY Person.name;


/*
 * Problem 14. Put your SQL command for this problem below.	
 */
SELECT Oscar.type, AVG (Movie.runtime) as AverageRunTime
FROM Oscar, Movie
WHERE Oscar.movie_id = Movie.id
GROUP BY Oscar.type;


/*
 * Problem 15. Put your SQL command for this problem below.	
 */
SELECT Movie.name, Movie.runtime
FROM Movie
WHERE Movie.runtime = (SELECT MAX(runtime) FROM Movie)
OR Movie.runtime = (SELECT MIN(runtime) FROM Movie);


/*
 * Problem 16. Put your SQL command for this problem below.	
 */
UPDATE Movie
SET rating = 'PG-13'
WHERE id = '0087469';


/*
 * Problem 17 (required for grad-credit students; optional for others). 
 * Put your SQL command for this problem below.	
 */
SELECT COUNT(*) FROM 
(SELECT * FROM Actor JOIN Director
ON Actor.movie_id = Director.movie_id
GROUP BY Actor.actor_id, Director.director_id
HAVING COUNT(Actor.movie_id) >= 2);


/*
 * Problem 18 (required for grad-credit students; optional for others). 
 * Put your SQL command(s) for this problem below.	
 */
SELECT Movie.name, Oscar.type
FROM Movie
LEFT OUTER JOIN Oscar ON Movie.id = Oscar.movie_id
WHERE Movie.id IN
	(SELECT Director.movie_id
	FROM Director
	WHERE Director.director_id = '0000229');